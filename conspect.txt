• Класс - универсальный, комплексный тип данных, состоящий из тематически единого набора «полей»
(переменных более элементарных типов) и «методов» (функций для работы с этими полями), то есть он
является моделью информационной сущности с внутренним и внешним интерфейсами для оперирования своим содержимым.

• Класс – ссылочный тип данных;

• Переменная данного типа данных называется экземпляром (объектом) данного класса.

• Конструктор – это специальный метод класса, который вызывается при создании объекта.

• Конструктор без параметров называется конструктором по умолчанию (default constructor).

• Если в классе нет ни одного конструктора, то генерируется пустой конструктор по умолчанию.

• Если в классе есть хотя бы один конструктор, то конструктор по умолчанию не генерируется.

• null – специальная константа, которая указывает на то, что не существует объекта, на который указывает данная ссылка;

• Создать объект в Java можно только с помощью оператора new. Только при использовании new выделяется память под объект класса;

• По умолчанию ссылочные переменные класса равны null, примитивы 0 и false соответственно;

• Принцип инкапсуляции – принцип сокрытия данных, позволяет защищать внутренние
   переменные класса от внешнего неконтролируемого воздействия;

• С помощью ключевого слова this можно получить ссылку на текущий объект, и с ее помощью
обращаться к переменным класса, методам и вызывать конструкторы;

• Стандартным шаблоном при создании классов предметной области в Java является
использование getter & setter даже без дополнительных проверок. Такие классы в Java иногда
называют bean или POJO.

• Наследование — концепция объектно-ориентированного программирования, согласно которой можно
описать новый класс на основе уже существующего с частично или полностью заимствующейся
функциональностью.

• Модификатор доступа protected разрешает доступ к полю, методу, конструктору из класса
наследника (кроме того еще и доступ из текущего пакета);

• Композиция и наследование позволяют исключить дублирование кода, но разными способами;

• В классе наследнике допускается переопределить метод из любого его родителя. При
переопределении имя метода, порядок и тип параметров должны совпадать с родительской версией.
Модификатор доступа может быть расширен: protected  public; default  protected  public. Тип
возвращаемого результата может быть наследником от типа родительского метода;

• Ссылке родительского класса можно присвоить объект наследника. Ограничения только на уровне
компиляции;

• Полиморфизм — концепция объектноориентированного программирования, согласно которой можно использовать объекты
 с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.

• «один интерфейс — много реализаций».

• Таким образом любой класс наследник может переопределить поведение родительского метода,
добавив свою реализацию общего интерфейса.

• За счет алгоритма восходящего поиска метода в runtime выполняется переопределенный метод
РЕАЛЬНОГО объекта;

• У любого класса в Java (кроме Object ) есть родитель. Если родитель не указан, то имеется ввиду Object.

• Правила сравнения объектов по равно задается в методе equals().
При переопределении метода equals() не стоит забывать об hashCode()!
Правила реализации hashCode: : если два объекта равны по equals у них hashCode должен возвращать ОДНО И ТОЖЕ ЗНАЧЕНИЕ;

• Ключевое слово final определяет константу, запрещает переопределять метод и запрещает
наследоваться от класса;

• При использовании final на ссылочном типе данных константой является ссылка, а не сам объект.

• Неизменяемость (Immutable) объекта достигается за счет удаления методов модификации данных.

• Чтобы определить реальный класс в Java используется метод getClass() или оператор instanceof.

• Классы являются ссылочными типами данных (как и массивы) и в методы передаются по ссылке

• Статическая переменная используется для хранения каких-то глобальных данных для всех объектов
данного класса;

•  Статический метод имеет доступ к статическим переменным, его нельзя переопределить, для вызова
нужно указывать класс, а не ссылку на объект класса. Статический метод должен использоваться для
вычислений не требующих переменных объекта текущего класса, а также может быть использован
для создания экземпляров текущего класса;

•  Статическая секция – аналог конструктора для не статических переменных;

• Классы, которые не предназначены для автономного использования, а предназначенные для
описания общих методов для наследников, чтобы исключить дублирование кода должны быть
абстрактными! Невозможно создать объект абстрактного класса!

• Непубличный класс предоставляет возможность описать логику, которая будет доступна только
внутри пакета и скрыть ее от внешних классов;

• Внутренние классы позволяют описать логику доступную только внутри текущего класса.

• Нестатические внутренние классы содержат ссылку на внешний класс и объекты данных классов
могут быть созданы только если объект внешнего класса существует. Данные классы имеют доступ
ко всем переменным и методам внешнего класса независимо от модификатора доступа.

• Статические внутренние классы не содержат ссылку на внешний класс, их объекты могут быть
созданы независимо от существования внешнего класса и они имеют доступ ТОЛЬКО к статическим
переменным и методам внешнего класса;

• Внутренний анонимный класс – подмножество внутренних нестатических классов и позволяет
сократить количество кода, необходимое для быстрого переопределения какого-то метода из
родительского класса. Часто используются для создания тестовых объектов абстрактных классов для
тестирования приложения;

• Создавать объекты в Java можно с помощью оператора new и статических методов. Для создания
единственного экземпляра объекта данного класса используется шаблон Singleton.

• Параметризация позволяет абстрагироваться от типа данных. Доступна только на уровне компиляции!




