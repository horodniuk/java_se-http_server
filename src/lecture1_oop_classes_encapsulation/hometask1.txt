Основное домашнее задание
Добавить метод int remove(int index) в класс DynaArray, который  удалит элемент из динамического массива по индексу и вернет удаленный  элемент;

Реализовать класс LinkedList (класс реализации двусвязного списка) (+LinkedListTest);
Описание структуры данных двусвязный список на примере стандартного Java класса доступно по ссылке LinkedList  (Ваша задача написать упрощенный аналог стандартного класса, чтобы разобраться как он работает)

Реализовать класс очереди Queue;

Реализовать класс стека Stack;

Решение данного задание описывается в следующей лекции





Дополнительное домашнее задание
(Данные задания необходимо выполнить после основного домашнего задания для закрепления пройденного материала)

Задание: Создать класс комплексных чисел Complex (Википедия) и реализовать в классе методы:

конструктор Complex(double x, double y) для создания комплексного числа с x-вещественной частью, y-мнимой частью;

метод String getValue() - данный метод возвращает строковое представление комплексного числа (т.е. такое: x+iy);

getters и setters для вещественной и мнимой части комплексного числа;

метод Complex add(Complex secondArgument) - возвращает новый объект  комплексного числа, которое равно сумме текущего числа и secondArgument  (см. в Википедии о правилах сложения комплексных чисел);

метод Complex sub(Complex secondArgument) - возвращает новый объект  комплексного числа, которое равно разности текущего числа и  secondArgument (см. в Википедии о правилах вычитания комплексных чисел);

метод Complex mul(Complex secondArgument) - возвращает новый объект  комплексного числа, которое равно произведению текущего числа и  secondArgument (см. в Википедии о правилах произведения комплексных  чисел);

метод Complex div(Complex secondArgument) - возвращает новый объект  комплексного числа, которое равно частному от деления текущего числа на  secondArgument (см. в Википедии о правилах деления комплексных чисел);

Добавить в классе Complex метод main, в котором протестировать все методы.




Задание: Создать класс матрицы (Matrix) double чисел размерностью rows и cols и реализовать в классе методы:

конструктор матрицы public Matrix(int rows, int cols), где rows - количество строк, cols - количество столбцов матрицы;

метод void fill(double value) - данный метод заполнит матрицу значением value;

методы getRows(), getCols();

метод void print() - метод, который печатает матрицу в стандартный  поток вывода System.out. Матрица должна быть напечатана в виде таблицы:  сначала первая строка, затем вторая и т.д;

метод Matrix transpose() - данный метод возвращает новую матрицу,  которая является транспонированной версией текущей матрицы.  (Транспонирование означает переворачивание матрицы: у исходной матрицы  есть строки и столбцы, у транспонированной матрицы строки становятся  столбцами, а столбцы строками).

Добавить в классе Matrix метод main, в котором протестировать все методы.




Задание: Создать класс односвязного списка LinkedList c  методами add, get, remove, size, clear, toArray. (т.е. с такими же  методами, что и двусвязный список (см. лекцию)). Разница только в том,  что класс Item будет содержать ссылку только на next элемент. Ссылку на  предыдущий элемент Item не будет хранить! Поэтому список и называется  ОДНОСВЯЗНЫМ (Одна связь - только в сторону next). Создать класс  LinkedListTest и протестировать методы LinkedList




Задание: Создать класс Tree (Обычное дерево). В классе  будет одно поле Leaf root - корень дерева. В классе Leaf, который  представляет лист дерева, должны быть поля: int value (данное поле  хранит полезную информацию в листе дерева) и массив дочерних листов:  Leaf[] leaves. В классе Tree должны быть:

конструктор Tree(int value) для создания дерева с одним корневым элементом со значением листа=value;

метод void add(int parentValue, int value) - данный метод находит  лист в дереве со значением parentValue и добавляет в него дочерний лист  со значением value. Если листа со значением parentValue нет в дереве, то  тогда отобразить соответствующее сообщение на консоль;

метод Tree getSubTree(int value) - возвращает поддерево с указанным  value в качестве корневого элемент или null, если такого value нет в  исходном дереве;

метод void print() - печатает текущее дерево в виде

0
|-1
| |-11
| |-12
| |-13
|-2
| |-21
| |-22
| |-23
|-3
| |-31
| |-32
| |-33
, где 0 - корневой элемент, у которого дочерние элементы: 1,2,3. У элемента 1 дочерние элементы: 11,12,13 и т.д.
Числа 1,2,3 и др. являются значением value каждого листа данного дерева

