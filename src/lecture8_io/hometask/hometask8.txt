1. Реализовать интерфейс IOUtils




Дополнительное домашнее задание
(Данные задания необходимо выполнить после основного домашнего задания для закрепления пройденного материала)

2.Задание: В наличии есть три файла с мужскими именами, женскими именами и фамилиями: male.txt,  female.txt,  surname.txt  необходимо написать программу-генератор, которая сгенерирует 100  мужских и 100 женских тестовых аккаунтов в формате: ${Name} ${Surname}.  (т.е. сначала имя, а затем через пробел фамилия тестового аккаунта).  Требования к программе:

Данные в файле не нормализованы (могут содержать пробелы и быть в  разных регистрах) и могут содержать дубликаты, например в файле male.txt первые три записи - это одно и то же имя, а четвертая строка вообще пустая;

Признак нового имени - символ перевода на новую строку, т.е. если строка не пустая - то это имя или фамилия;

Программа должна сгенерировать 2 файла: male-accounts.txt и female-accounts.txt. Пример результирующего файла с 2 аккаунтами:

Clifford Ruby
Terrance Foley
Программа должна генерировать случайные данные при каждом запуске;

Имена и фамилии не должны повторяться: мужские имена должны быть  уникальными между собой и женские имена должны быть уникальными между  собой, фамилии должны быть уникальными как для мужских. так и для  женских имен;


3.Задание: Для сгенерированных на прошлом задании  аккаунтов написать программу,
 которая установит тестовую дружбу между  аккаунтами. Требования к программе:

Программа должна загрузить данные с файлов male-accounts.txt
 и  female-accounts.txt в одну коллекцию и установить дружбу между тестовыми  аккаунтами;

В результате программа должна сгенерировать файл, в котором будет указан аккаунт и все друзья текущего аккаунта, например:

Jarvis England=[Kristan Clarke, Brandon Mobley]
Latrice Haight=[Rufina Barajas, Darrin Diamond, Jewell Ott, Kia Tavarez, Abel Fong, Thaddeus Tharp]
. т.е. аккаунт Jarvis England дружит с Kristan Clarke и Brandon Mobley;

Минимальное количество друзей = 4, максимальное = 16 для каждого аккаунта;

Программа должна генерировать случайные данные при каждом запуске;


4.Задание: Создать класс FileSearcher, который будет выполнять регистронезависимый поиск файлов по шаблонам. Допустимые шаблоны поиска:

Точное слово без учета регистра;

Шаблон с точным количеством неизвестных символов. В качестве символа  шаблона использовать символ '?',
 например по шаблону ????.java должны  находится файлы: Item.java, Util.java и т.д.,
  т.е. файлы у которых идут  первые 4 любых символа, а затем .java;

Шаблон с неизвестным количеством неизвестных символов. В качестве  символа шаблона использовать символ '*',
 например по шаблону *$*.cl*ss  должны находится файлы: FileSearcher$1.class,  GenerateFriendship$Account.class и т.д.;


5.Задание: В наличии есть файл с номерами телефонов: phones.txt  необходимо написать программу,
 создающую новый файл  unique-phones.txt,
 который будет содержать только уникальные номера  телефонов из файла phones.txt

