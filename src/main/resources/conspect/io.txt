java.io.InputStream

 public abstract int read() throws IOException; - возвращает целочисленное представление
следующего доступного байта в потоке. При достижении конца файла возвращается значение -1

 public int read(byte b[]) throws IOException;//- пытается читать байты в буфер, возвращая количество
прочитанных байтов. По достижении конца потока возвращает значение -1

 public int read(byte buffer[], int off, int len) throws IOException;//- пытается читать до len байт в
buffer, начиная с смещения off. По достижении конца файла возвращает -1

 public long skip(long n) throws IOException;//- пропускает n байт ввода, возвращая количество
проигнорированных байтов

 public int available() throws IOException; // возвращает количество байтов ввода, доступные в
данный момент для чтения

 public void close() throws IOException;//- закрывает источник ввода. Следующие попытки чтения
передадут исключение IOException

 public void mark(int readlimit);//- помещает метку в текущую точку входного потока, которая
остаётся корректной до тех пор, пока не будет прочитано readlimint байт

 public void reset() throws IOException;// - сбрасывает входной указатель в ранее установленную
метку

 public boolean markSupported();//- возвращает true, если методы mark() и reset() поддерживаются
потоком


Потомки InputStream
• BufferedInputStream - буферизированный входной поток;
• ByteArrayInputStream - позволяет использовать буфер в памяти (массив байтов) в
качестве источника данных для входного потока;
• DataInputStream - входной поток, включающий методы для чтения стандартных
типов данных Java;
• FileInputStream - для чтения информации из файла;
• FilterInputStream - абстрактный класс, предоставляющий интерфейс для классовнадстроек,
 которые добавляют к существующим потокам полезные свойства;
• ObjectInputStream - входной поток для объектов используемый для сериализации;
• PipedInputStream - реализует понятие входного канала для взаимодействия
между нитями выполнения;
• PushbackInputStream - входной поток, поддерживающий однобайтовый возврат
во входной поток;
• SequenceInputStream – соединяет два или более потока InputStream в единый
поток;
• SocketInputStream – входной поток данных из сетевого соединения;

java.io.OutputStream


 public abstract void write(int b) throws IOException; // - записывает единственный байт в выходной
поток;

 public void write(byte b[]) throws IOException; // - записывает полный массив байтов в выходной
поток;

 public void write(byte b[], int off, int len) throws IOException; // - записывает диапазон из len байт из
массива, начиная с смещения off;

 public void flush() throws IOException;// - сбрасывает все буферы вывода в поток, очищая все
    буферы вывода. (При записи данных на некоторых реализациях данные сначала записываются в
    специальный буфер (раздел оперативной памяти), а только затем сбрасывается в поток. Метод
    flush принудительно сбрасывает буфер в поток);

 public void close() throws IOException; // - закрывает выходной поток. Следующие попытки записи
выбросят исключение IOException.


Потомки OutputStream
• BufferedOutputStream - Буферизированный выходной поток;
• ByteArrayOutputStream - Создает буфер в памяти. Все данные,
посылаемые в этот поток, размещаются в созданном буфере;
• DataOutputStream - выходной поток, включающий методы для записи
стандартных типов данных Java;
• FileOutputStream - отправка данных в файл на диске;
• ObjectOutputStream - выходной поток для объектов при сериализации;
• PipedOutputStream - реализует понятие выходного канала для
взаимодействия между нитями выполнения;
• FilterOutputStream - абстрактный класс, предоставляющий интерфейс
для классов-надстроек, которые добавлят к существующим потокам
полезные свойств;
• SocketOutputStream – вsходной поток данных из сетевого соединения;
• PrintStream - выходной поток, включающий методы print() и println();

java.io.Reader


 public int read() throws IOException; // - возвращает целочисленное представление следующего
доступного символа вызывающего входного потока. При достижении конца файла возвращает
значение -1.

 public int read(char cbuf[]) throws IOException; // - пытается читать символы в буфер, возвращая
количество прочитанных символов. По достижении конца потока возвращает значение -1

 abstract public int read(char cbuf[], int off, int len) throws IOException; // - пытается читать символы в
буфер, возвращая количество прочитанных символов. По достижении конца потока возвращает
значение -1

 public long skip(long n) throws IOException ; // - пропускает указанное число символов ввода,
возвращая количество действительно пропущенных символов

 public boolean ready() throws IOException; // - возвращает значение true, если следующий запрос на
чтение не будет блокировать текущую нить выполнения.

 public boolean markSupported(); // - возвращает true, если поток поддерживает методы mark() и
reset();

 public void mark(int readAheadLimit) throws IOException; // - помещает метку в текущую позицию во
входном потоке;

 public void reset() throws IOException;// - сбрасывает указатель ввода в ранее установленную
позицию метки;

 abstract public void close() throws IOException; // - закрывает входной поток. Последующие попытки
чтения вызовут исключение IOException;

Потомки Reader
• BufferedReader - буферизированный входной символьный поток;
• CharArrayReader - входной поток, который читает из символьного
массива;
• FileReader - входной поток, читающий текстовый файл;
• FilterReader - абстрактный класс, предоставляющий интерфейс для
классов-надстроек, которые добавляют к существующим потокам
полезные свойства;
• InputStreamReader - входной поток, транслирующий байты в символы;
• LineNumberReader - входной поток, подсчитывающий строки;
• PipedReader - входной канал для взаимодействия между нитями
выполнения;
• PushbackReader - входной поток, позволяющий возвращать символы
обратно в поток;
• StringReader - входной поток, читающий из строки.


java.io.Writer

 public void write(int c) throws IOException; //- записывает единственный символ в вызывающий
выходной поток;

 public void write(char cbuf[]) throws IOException; //- записывает массив символов в вызывающий
выходной поток;

 abstract public void write(char cbuf[], int off, int len) throws IOException; // - записывает массив
символов с позиции off длиной len символов в вызывающий выходной поток;

 public void write(String str) throws IOException; // - записывает строку в вызывающий выходной
поток

 public void write(String str, int off, int len) throws IOException; // - записывает строку с позиции off
длиной len символов в вызывающий выходной поток;

 public Writer append(CharSequence csq) throws IOException; // - добавляет диапазон символов в
конец вызывающего выходного потока. Возвращает ссылку на вызывающий поток;

 public Writer append(CharSequence csq, int start, int end) throws IOException; // - добавляет символы
в конец вызывающего выходного потока. Возвращает ссылку на вызывающий поток;

 public Writer append(char c) throws IOException; // добавляет символ в конец вызывающего
выходного потока. Возвращает ссылку на вызывающий поток;

 abstract public void flush() throws IOException; // - сбрасывает все буферы вывода в поток, очищая
все буферы вывода;

 abstract public void close() throws IOException; // - закрывает выходной поток. Следующие попытки
записи выбросят исключение IOException;


Потомки Writer
• BufferedWriter - Буферизированный выходной символьный поток;
• CharArrayWriter - Выходной поток, который пишет в символьный
массив;
• FileWriter - выходной поток, пишущий в текстовый файл;
• FilterWriter - абстрактный класс, предоставляющий интерфейс для
классов-надстроек, которые добавляют к существующим потокам
полезные свойства;
• OutputStreamWriter - выходной поток, транслирующий байты в
символы;
• PipedWriter - выходной канал для взаимодействия между нитями
выполнения;
• PrintWriter - выходной поток, включающий методы print() и println();
• StringWriter - выходной поток, пишущий в строку;
















